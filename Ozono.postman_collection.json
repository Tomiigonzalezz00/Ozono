{
	"info": {
		"_postman_id": "34daa372-cee6-4f50-a009-1c4e10812ddc",
		"name": "Ozono",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27613916"
	},
	"item": [
		{
			"name": "Puntos Verdes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"El tiempo de respuesta es inferior a 200 ms.\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// Verificar la longitud de los datos de respuesta\r",
							"pm.test(\"La longitud de los datos de respuesta debe ser mayor que cero\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.length).to.be.greaterThan(0, \"Los datos de respuesta no deben estar vacíos.\");\r",
							"});\r",
							"\r",
							"// Añadir una prueba para validar el esquema de respuesta\r",
							"pm.test(\"El esquema de respuesta es válido\", function () {\r",
							"  var schema = {\r",
							"    type: \"array\",\r",
							"    items: {\r",
							"      type: \"object\",\r",
							"      properties: {\r",
							"        id: { type: \"string\" },\r",
							"        nombre: { type: \"string\" },\r",
							"        direccion: { type: \"string\" },\r",
							"        materiales: { type: \"string\" },\r",
							"        mas_info: { type: \"string\" },\r",
							"        dia_hora: { type: \"string\" },\r",
							"        tipo: { type: \"string\" },\r",
							"        cooperativa: { type: \"string\" },\r",
							"        calle: { type: \"string\" },\r",
							"        altura: { type: [\"number\", \"null\"] },\r",
							"        calle2: { type: \"string\" },\r",
							"        barrio: { type: \"string\" },\r",
							"        comuna: { type: \"string\" },\r",
							"        longitud: { type: \"number\" },\r",
							"        latitud: { type: \"number\" }\r",
							"      },\r",
							"      required: [\"id\", \"nombre\", \"direccion\", \"materiales\", \"mas_info\", \"dia_hora\", \"tipo\", \"cooperativa\", \"calle\", \"calle2\", \"barrio\", \"comuna\", \"longitud\", \"latitud\"]\r",
							"    }\r",
							"  };\r",
							"\r",
							"  var response = pm.response.json();\r",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"El código de estado de respuesta es 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"La respuesta tiene los campos obligatorios.\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('nombre');\r",
							"        pm.expect(item).to.have.property('direccion');\r",
							"        pm.expect(item).to.have.property('materiales');\r",
							"        pm.expect(item).to.have.property('mas_info');\r",
							"        pm.expect(item).to.have.property('dia_hora');\r",
							"        pm.expect(item).to.have.property('tipo');\r",
							"        pm.expect(item).to.have.property('cooperativa');\r",
							"        pm.expect(item).to.have.property('calle');\r",
							"        pm.expect(item).to.have.property('calle2');\r",
							"        pm.expect(item).to.have.property('barrio');\r",
							"        pm.expect(item).to.have.property('comuna');\r",
							"        pm.expect(item).to.have.property('longitud');\r",
							"        pm.expect(item).to.have.property('latitud');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"ID es una cadena no vacía\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"El ID debe ser una cadena que no esté vacía\");\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"La latitud y la longitud están dentro del rango válido.\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"\r",
							"  responseData.forEach(function (puntoVerde) {\r",
							"    pm.expect(puntoVerde.latitud).to.be.within(-90, 90);\r",
							"    pm.expect(puntoVerde.longitud).to.be.within(-180, 180);\r",
							"  });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8000/api/puntos-verdes",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"api",
						"puntos-verdes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Consejos RRR",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"El status code de respuesta es 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"La respuesta tiene los campos obligatorios: id, título, categoría y descripción.\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.be.an('object');\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('titulo');\r",
							"        pm.expect(item).to.have.property('categoria');\r",
							"        pm.expect(item).to.have.property('descripcion');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verifique que el encabezado Content-Type sea application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"El tiempo de respuesta es inferior a 200 ms.\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// Agrega una prueba para validar la longitud del cuerpo de la respuesta\r",
							"pm.test(\"La longitud de la respuesta debe ser mayor que cero\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.length).to.be.greaterThan(0, \"La respuesta no debe estar vacía\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8000/api/consejos-rrr",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"api",
						"consejos-rrr"
					]
				}
			},
			"response": []
		},
		{
			"name": "Calendario Ambiental",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"El código de estado de respuesta es 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"La respuesta tiene tipo de contenido aplicación/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"// Prueba para verificar si la fecha en la respuesta tiene un formato de fecha válido\r",
							"pm.test(\"La fecha tiene un formato de fecha válido.\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.fecha).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"El tiempo de respuesta está dentro del rango aceptable\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"// Verificar la estructura de la respuesta\r",
							"pm.test(\"La estructura de la respuesta es válida\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"La respuesta tiene los campos obligatorios - id, evento, fecha, y descripcion\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('evento');\r",
							"        pm.expect(item).to.have.property('fecha');\r",
							"        pm.expect(item).to.have.property('descripcion');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Cada elemento en la respuesta tiene valores no vacíos para los campos obligatorios\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(element) {\r",
							"        pm.expect(element.id).to.exist.and.to.not.equal(\"\");\r",
							"        pm.expect(element.evento).to.exist.and.to.not.equal(\"\");\r",
							"        pm.expect(element.fecha).to.exist.and.to.not.equal(\"\");\r",
							"        pm.expect(element.descripcion).to.exist.and.to.not.equal(\"\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"La descripción de cada evento es una cadena de texto no vacía\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.descripcion).to.be.a('string').and.to.have.lengthOf.at.least(1, \"La descripción no debe estar vacía\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8000/api/calendario-ambiental",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"api",
						"calendario-ambiental"
					]
				}
			},
			"response": []
		}
	]
}